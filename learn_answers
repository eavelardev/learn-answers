#!/usr/bin/env python3

import argparse
import json
import curses
import random

def main():
    parser = argparse.ArgumentParser(description='Learn answers.')

    parser.add_argument('-f', '--file',
                        type=argparse.FileType('r'),
                        help='Input file.')
    parser.add_argument('-r', '--random',
                        action='store_true',
                        help='Choose random question.')

    parser.add_argument('-l', '--loop',
                        action='store_true',
                        help='Ask questions forever. Ctrl+c to exit')

    args = parser.parse_args()
    # args = parser.parse_args(['-f', 'test.json'])
    f = args.file
    data = json.load(f)
    f.close()
    win = curses.initscr()
    nlines, ncols = win.getmaxyx()

    skip_question = 0
    restart_question = 1
    pass_answer = 2
    no_pass_answer = 3

    def get_word():
        word = ''
        while True:
            ch = win.getkey()
            if ch == ' ' or ch == '\n' or ch == '\x7f':
                return word, ch
            if ch.isprintable():
                word += ch

    def analyze_answer(answer, note):
        answer_words = answer.split()
        in_word, state = get_word()

        if state == '\n':
            if len(in_word) == 0:
                return skip_question
            elif len(answer_words) > 1:
                return no_pass_answer

        pass_i_answer = None
        total_chrs = 0
        last_x = 0

        for i in range(len(answer_words)):
            if i == len(answer_words) - 1:
                if in_word.endswith('.') and not answer_words[i].endswith('.'):
                    in_word = in_word[:-1]
                if not in_word.endswith('.') and answer_words[i].endswith('.'):
                    in_word += '.'

            if in_word != answer_words[i]:
                win.addstr('\n')
                while True: # practice answer
                    if pass_i_answer is None:
                        for j in range(len(answer_words)):
                            if j == i:
                                win.addstr(
                                    answer_words[j], curses.A_STANDOUT)
                            else:
                                win.addstr(
                                    answer_words[j], curses.A_UNDERLINE)

                            if j != len(answer_words) - 1:
                                win.addstr(' ', curses.A_UNDERLINE)

                        win.addstr('\n')
                        if note:
                            win.addstr(note + '\n\n', curses.A_DIM)
                        pass_i_answer = False
                    else:
                        win.addstr(' ' * (total_chrs % ncols))
                        win.addstr(
                            answer_words[i] + '\n', curses.A_STANDOUT)

                    win.addstr(answer[total_chrs - last_x: total_chrs])

                    last_y, last_x = win.getyx()
                    if last_y > nlines - 3:
                        return restart_question

                    in_word, state = get_word()

                    if state == '\n':
                        return restart_question

                    if in_word == answer_words[i]:
                        break
                    else:
                        win.addstr('\n')

            total_chrs += len(answer_words[i])
            if i < len(answer_words) - 1:
                total_chrs += 1

            if i == len(answer_words) - 1:
                if pass_i_answer is None:
                    return pass_answer
                else: 
                    return no_pass_answer

            last_y, last_x = win.getyx()

            if last_y > nlines - 3:
                return restart_question

            in_word, state = get_word()

            if state == '\n' and i < len(answer_words) - 2:
                return restart_question


    while True:
        if args.random and len(data) > 1:
            last_q = data[-1]['question']
            while True:
                random.shuffle(data)
                if data[0]['question'] != last_q:
                    break

        for q, question in enumerate(data):

            answers = question.get('answer')
            if answers is None:
                answers = [answer.get('answer') for answer in question.get('answers')]
            else:
                answers = [answers]

            options = question.get('options')
            if options is not None:
                options = [option.get('option') for option in options]
                answers = [options[answer-1] for answer in answers]
                random.shuffle(options) # random order options
                answers = [option for option in options if option in answers]
    
            note = question.get('note')
            complement = question.get('complement')

            i_answer = 0

            while True:
                win.clear()
                if not args.random:
                    win.addstr(str(q+1) + '. ', curses.A_BOLD) # add num question
                win.addstr(question.get('question') + '\n', curses.A_BOLD)

                if options is not None:
                    for option in options:
                        win.addstr('    â€¢ ' + option + '\n')
                    win.addstr('\n')

                if i_answer == 0:
                    pass_answers = True

                if len(answers) > 1:
                    win.addstr(str(i_answer+1) + ". ")

                answer_result = analyze_answer(answers[i_answer], note)

                if answer_result == no_pass_answer:
                    pass_answers = False
                elif answer_result == pass_answer:
                    if i_answer == len(answers) - 1:
                        if pass_answers:
                            break
                        else:
                            i_answer = 0
                    else:
                        i_answer += 1
                elif answer_result == restart_question:
                    i_answer = 0
                elif answer_result == skip_question:
                    break

        if not args.loop:
            break

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass

    print('\nTraining finished')
    curses.endwin()
